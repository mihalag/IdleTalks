// <auto-generated>
// ReSharper disable RedundantUsingDirective
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable RedundantNameQualifier
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Data.Entity.Infrastructure;
using System.Linq.Expressions;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data;
using System.Data.Entity.Core.Objects;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Data.Entity.ModelConfiguration;
using System.Threading;
using DatabaseGeneratedOption = System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption;

namespace IdleTalks.DA
{
    public class IdleTalksDbContext : DbContext, IIdleTalksDbContext
    {
        public DbSet<Conversation> Conversations { get; set; } // Conversation
        public DbSet<ConversationReply> ConversationReplies { get; set; } // ConversationReply
        public DbSet<Mood> Moods { get; set; } // Mood
        public DbSet<Note> Notes { get; set; } // Note
        public DbSet<User> Users { get; set; } // User
        
        static IdleTalksDbContext()
        {
            System.Data.Entity.Database.SetInitializer<IdleTalksDbContext>(null);
        }

        public IdleTalksDbContext()
            : base("Name=IdleTalks")
        {
        }

        public IdleTalksDbContext(string connectionString) : base(connectionString)
        {
        }

        public IdleTalksDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model) : base(connectionString, model)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new ConversationConfiguration());
            modelBuilder.Configurations.Add(new ConversationReplyConfiguration());
            modelBuilder.Configurations.Add(new MoodConfiguration());
            modelBuilder.Configurations.Add(new NoteConfiguration());
            modelBuilder.Configurations.Add(new UserConfiguration());
        }

        public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new ConversationConfiguration(schema));
            modelBuilder.Configurations.Add(new ConversationReplyConfiguration(schema));
            modelBuilder.Configurations.Add(new MoodConfiguration(schema));
            modelBuilder.Configurations.Add(new NoteConfiguration(schema));
            modelBuilder.Configurations.Add(new UserConfiguration(schema));
            return modelBuilder;
        }
        
        // Stored Procedures
    }
}
// </auto-generated>
